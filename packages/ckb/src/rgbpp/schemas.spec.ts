import { describe, it, expect } from 'vitest';
import { buildRgbppUnlockWitness } from './ckb-builder.js';
import { buildBtcTimeUnlockWitness } from './btc-time.js';

describe('RGBPP schemas', () => {
  // The test data is from RGBPP lock contract test
  it('buildRgbppUnlockWitness', () => {
    const btcTx =
      '0x000000000181aad32adc6b05a424281403c9a835279247befaf84fe4c411bbcfaffe0a7cea0000000020a7c2244ec166e1fa756ba0e5562fd13ade25df22e9ced69dea8364c4671261b0000000000200000000000001f4226a2067b900ca0203de66033cff3d62bfbff11f41d43071f56b11e2818ee2aa6e2b0000000000000001f42097f437158a724699056fc27259a9a73b3b5f39792760bad78582ec334b81c16600000000';
    const txProof =
      '0xb900000014000000180000001c00000025000000020000002a0000000500000070726f6f660200000064000000e803000001000000000000000000000000000000000000000000000000000000000000000303030303030303030303030303030303030303030303030303030303030303e8030000d007000001000000000000000000000000000000000000000000000000000000000000000303030303030303030303030303030303030303030303030303030303030303';
    const inputsLen = 1;
    const outputsLen = 2;
    const rgbppUnlock = buildRgbppUnlockWitness(btcTx, txProof, inputsLen, outputsLen);
    expect(
      '0x80010000140000001600000018000000c300000000000102a7000000000000000181aad32adc6b05a424281403c9a835279247befaf84fe4c411bbcfaffe0a7cea0000000020a7c2244ec166e1fa756ba0e5562fd13ade25df22e9ced69dea8364c4671261b0000000000200000000000001f4226a2067b900ca0203de66033cff3d62bfbff11f41d43071f56b11e2818ee2aa6e2b0000000000000001f42097f437158a724699056fc27259a9a73b3b5f39792760bad78582ec334b81c16600000000b9000000b900000014000000180000001c00000025000000020000002a0000000500000070726f6f660200000064000000e803000001000000000000000000000000000000000000000000000000000000000000000303030303030303030303030303030303030303030303030303030303030303e8030000d007000001000000000000000000000000000000000000000000000000000000000000000303030303030303030303030303030303030303030303030303030303030303',
    ).toBe(rgbppUnlock);
  });

  it('buildBtcTimeUnlockWitness', () => {
    const txProof = '0x0102030405060708';
    const btcTimeUnlock = buildBtcTimeUnlockWitness(txProof);
    expect('0x1400000008000000080000000102030405060708').toBe(btcTimeUnlock);
  });
});
